// src/app/core/services/observable-to-promise-migration.ts
// Guide de migration de toPromise() vers les nouvelles m√©thodes RxJS

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, firstValueFrom, lastValueFrom, take } from 'rxjs';

/**
 * üö® PROBL√àME AVEC toPromise()
 * 
 * toPromise() est DEPRECATED depuis RxJS 7+ et cause des erreurs TypeScript :
 * "Conversion of type any[] | undefined to type Promise<any[]> may be a mistake"
 * 
 * Cela arrive car toPromise() peut retourner undefined si l'Observable se complete
 * sans √©mettre de valeur.
 */

@Injectable({
  providedIn: 'root'
})
export class ObservableToPromiseMigrationService {

  constructor(private http: HttpClient) {}

  /**
   * ‚ùå ANCIENNE M√âTHODE (DEPRECATED)
   * Cause l'erreur TypeScript TS2352
   */
  async getDataOldWay(): Promise<any[]> {
    // ‚ùå Cette ligne cause l'erreur
    // return await this.http.get<any[]>('/api/data').toPromise() as Promise<any[]>;
    
    // Le casting "as Promise<any[]>" est n√©cessaire mais dangereux
    // car toPromise() peut retourner undefined
    return []; // Placeholder pour √©viter l'erreur
  }

  /**
   * ‚úÖ NOUVELLE M√âTHODE 1: firstValueFrom()
   * 
   * firstValueFrom() prend la PREMI√àRE valeur √©mise par l'Observable
   * et se complete imm√©diatement apr√®s.
   * 
   * Utiliser quand: Vous voulez juste la premi√®re r√©ponse (cas le plus courant pour HTTP)
   */
  async getDataWithFirstValue(): Promise<any[]> {
    try {
      // ‚úÖ Approche recommand√©e
      const data = await firstValueFrom(this.http.get<any[]>('/api/data'));
      return data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVELLE M√âTHODE 2: lastValueFrom()
   * 
   * lastValueFrom() attend que l'Observable se complete et prend la DERNI√àRE valeur √©mise.
   * 
   * Utiliser quand: Vous voulez attendre que l'Observable se complete enti√®rement
   * (rare pour les requ√™tes HTTP simples)
   */
  async getDataWithLastValue(): Promise<any[]> {
    try {
      // Pour les requ√™tes HTTP simples, firstValueFrom() est g√©n√©ralement pr√©f√©rable
      const data = await lastValueFrom(this.http.get<any[]>('/api/data'));
      return data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVELLE M√âTHODE 3: avec take(1)
   * 
   * Utilise take(1) pour s'assurer qu'on ne prend qu'une seule valeur
   * puis firstValueFrom() pour la convertir en Promise.
   */
  async getDataWithTake(): Promise<any[]> {
    try {
      const data = await firstValueFrom(
        this.http.get<any[]>('/api/data').pipe(take(1))
      );
      return data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ M√âTHODE 4: Gestion des cas d'erreur avec valeur par d√©faut
   */
  async getDataWithDefault(): Promise<any[]> {
    try {
      return await firstValueFrom(this.http.get<any[]>('/api/data'));
    } catch (error) {
      console.warn('Impossible de r√©cup√©rer les donn√©es, utilisation des donn√©es par d√©faut');
      // Retourner des donn√©es par d√©faut en cas d'erreur
      return [];
    }
  }

  /**
   * ‚úÖ M√âTHODE 5: Avec timeout et gestion d'erreur avanc√©e
   */
  async getDataWithTimeout(): Promise<any[]> {
    try {
      return await firstValueFrom(
        this.http.get<any[]>('/api/data')
        // Vous pouvez ajouter des op√©rateurs RxJS ici si n√©cessaire
        // .pipe(timeout(5000), retry(2))
      );
    } catch (error) {
      if (error.name === 'TimeoutError') {
        throw new Error('Timeout: La requ√™te a pris trop de temps');
      }
      throw error;
    }
  }

  /**
   * ‚úÖ COMPARAISON DES APPROCHES
   */
  
  // Pour les requ√™tes HTTP simples (GET, POST, PUT, DELETE)
  async httpRequest(): Promise<any> {
    // ‚úÖ RECOMMAND√â
    return await firstValueFrom(this.http.get('/api/endpoint'));
  }

  // Pour les Observables qui √©mettent plusieurs valeurs
  async multipleValues(): Promise<any> {
    // Si vous voulez la premi√®re valeur
    return await firstValueFrom(this.createObservable());
    
    // Si vous voulez la derni√®re valeur (apr√®s completion)
    // return await lastValueFrom(this.createObservable());
  }

  // Observable d'exemple qui √©met plusieurs valeurs
  private createObservable(): Observable<number> {
    return new Observable(observer => {
      observer.next(1);
      observer.next(2);
      observer.next(3);
      observer.complete();
    });
  }

  /**
   * üîß R√àGLES DE MIGRATION
   */
  
  // ‚ùå Remplacer ceci:
  // return await observable.toPromise() as Promise<T>;
  
  // ‚úÖ Par ceci:
  // return await firstValueFrom(observable);

  /**
   * üìã CHECKLIST DE MIGRATION
   * 
   * 1. ‚úÖ Importer firstValueFrom/lastValueFrom depuis 'rxjs'
   * 2. ‚úÖ Remplacer .toPromise() par firstValueFrom()
   * 3. ‚úÖ Supprimer les castings "as Promise<T>"
   * 4. ‚úÖ Tester que les erreurs sont bien g√©r√©es
   * 5. ‚úÖ V√©rifier que le comportement est identique
   */

  /**
   * üö® CAS PARTICULIERS
   */

  // Si l'Observable peut ne pas √©mettre de valeur
  async getDataMaybeEmpty(): Promise<any[] | undefined> {
    try {
      return await firstValueFrom(this.http.get<any[]>('/api/data'));
    } catch (error) {
      // firstValueFrom() lance une erreur si l'Observable se complete sans √©mettre
      console.warn('Aucune donn√©e √©mise');
      return undefined;
    }
  }

  // Si vous devez absolument utiliser toPromise() (non recommand√©)
  async getDataWithToPromiseWorkaround(): Promise<any[]> {
    const result = await this.http.get<any[]>('/api/data').toPromise();
    
    // Gestion explicite du cas undefined
    if (result === undefined) {
      throw new Error('Aucune donn√©e re√ßue');
    }
    
    return result;
  }
}

/**
 * üìö R√âSUM√â DES BONNES PRATIQUES
 * 
 * ‚úÖ DO:
 * - Utiliser firstValueFrom() pour les requ√™tes HTTP
 * - Utiliser lastValueFrom() pour les Observables qui se compl√®tent
 * - G√©rer les erreurs avec try/catch
 * - Tester le comportement apr√®s migration
 * 
 * ‚ùå DON'T:
 * - Utiliser toPromise() (deprecated)
 * - Ignorer les cas d'erreur
 * - Utiliser des castings dangereux "as Promise<T>"
 * - Oublier d'importer firstValueFrom/lastValueFrom
 */
